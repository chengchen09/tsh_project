// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ArrayDB.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace arraydb;

class ArrayDBHandler : virtual public ArrayDBIf {
 public:
  ArrayDBHandler() {
    // Your initialization goes here
  }

  void executeQuery(std::string& _return, const std::string& request, const std::string& data) {
    // Your implementation goes here
    printf("executeQuery\n");
  }

  void echo(std::string& _return, const std::string& request) {
    // Your implementation goes here
    printf("echo\n");
  }

  void store(std::string& _return, const Array& array, const std::string& array_name) {
    // Your implementation goes here
    printf("store\n");
  }

  void load_chunk(std::string& _return, const std::string& name, const int32_t id, const std::vector<int64_t> & first, const std::vector<int64_t> & last) {
    // Your implementation goes here
    printf("load_chunk\n");
  }

  void create_arrinfo(const ArrayInfo& arrinfo) {
    // Your implementation goes here
    printf("create_arrinfo\n");
  }

  void load(Array& _return, const std::string& array_name) {
    // Your implementation goes here
    printf("load\n");
  }

  void create_indexinfo(std::string& _return, const std::string& array_name, const std::string& index_name, const IndexType::type index_type) {
    // Your implementation goes here
    printf("create_indexinfo\n");
  }

  void filter(std::string& _return, const std::string& array_name, const std::string& var_name, const std::string& min, const std::string& max) {
    // Your implementation goes here
    printf("filter\n");
  }

  void set_time(std::string& _return, const bool flag) {
    // Your implementation goes here
    printf("set_time\n");
  }

  void set_index_type(std::string& _return, const IndexType::type index_type) {
    // Your implementation goes here
    printf("set_index_type\n");
  }

  void set_fillvalue(std::string& _return, const std::string& chunk_name, const std::string& fill_value) {
    // Your implementation goes here
    printf("set_fillvalue\n");
  }

  void set_para(std::string& _return, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("set_para\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ArrayDBHandler> handler(new ArrayDBHandler());
  shared_ptr<TProcessor> processor(new ArrayDBProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

