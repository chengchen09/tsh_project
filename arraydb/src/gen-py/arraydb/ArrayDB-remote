#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ArrayDB
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string executeQuery(string request, string data)'
  print '  string echo(string request)'
  print '  string store(Array array, string array_name)'
  print '  string load_chunk(string name, i32 id,  first,  last)'
  print '  void create_arrinfo(ArrayInfo arrinfo)'
  print '  Array load(string array_name)'
  print '  string create_indexinfo(string array_name, string index_name, IndexType index_type)'
  print '  string filter(string array_name, string var_name, string min, string max)'
  print '  string set_time(bool flag)'
  print '  string set_index_type(IndexType index_type)'
  print '  string set_fillvalue(string chunk_name, string fill_value)'
  print '  string set_para(string key, string value)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ArrayDB.Client(protocol)
transport.open()

if cmd == 'executeQuery':
  if len(args) != 2:
    print 'executeQuery requires 2 args'
    sys.exit(1)
  pp.pprint(client.executeQuery(args[0],args[1],))

elif cmd == 'echo':
  if len(args) != 1:
    print 'echo requires 1 args'
    sys.exit(1)
  pp.pprint(client.echo(args[0],))

elif cmd == 'store':
  if len(args) != 2:
    print 'store requires 2 args'
    sys.exit(1)
  pp.pprint(client.store(eval(args[0]),args[1],))

elif cmd == 'load_chunk':
  if len(args) != 4:
    print 'load_chunk requires 4 args'
    sys.exit(1)
  pp.pprint(client.load_chunk(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'create_arrinfo':
  if len(args) != 1:
    print 'create_arrinfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_arrinfo(eval(args[0]),))

elif cmd == 'load':
  if len(args) != 1:
    print 'load requires 1 args'
    sys.exit(1)
  pp.pprint(client.load(args[0],))

elif cmd == 'create_indexinfo':
  if len(args) != 3:
    print 'create_indexinfo requires 3 args'
    sys.exit(1)
  pp.pprint(client.create_indexinfo(args[0],args[1],eval(args[2]),))

elif cmd == 'filter':
  if len(args) != 4:
    print 'filter requires 4 args'
    sys.exit(1)
  pp.pprint(client.filter(args[0],args[1],args[2],args[3],))

elif cmd == 'set_time':
  if len(args) != 1:
    print 'set_time requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_time(eval(args[0]),))

elif cmd == 'set_index_type':
  if len(args) != 1:
    print 'set_index_type requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_index_type(eval(args[0]),))

elif cmd == 'set_fillvalue':
  if len(args) != 2:
    print 'set_fillvalue requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_fillvalue(args[0],args[1],))

elif cmd == 'set_para':
  if len(args) != 2:
    print 'set_para requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_para(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
