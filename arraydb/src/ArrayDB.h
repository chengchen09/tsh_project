/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ArrayDB_H
#define ArrayDB_H

#include <TProcessor.h>
#include "arraydb_types.h"

namespace arraydb {

class ArrayDBIf {
 public:
  virtual ~ArrayDBIf() {}
  virtual void executeQuery(std::string& _return, const std::string& request, const std::string& data) = 0;
  virtual void echo(std::string& _return, const std::string& request) = 0;
  virtual void store(std::string& _return, const Array& array, const std::string& array_name) = 0;
  virtual void load_chunk(std::string& _return, const std::string& name, const int32_t id, const std::vector<int64_t> & first, const std::vector<int64_t> & last) = 0;
  virtual void create_arrinfo(const ArrayInfo& arrinfo) = 0;
  virtual void load(Array& _return, const std::string& array_name) = 0;
  virtual void create_indexinfo(std::string& _return, const std::string& array_name, const std::string& index_name, const IndexType::type index_type) = 0;
  virtual void filter(std::string& _return, const std::string& array_name, const std::string& var_name, const std::string& min, const std::string& max) = 0;
  virtual void set_time(std::string& _return, const bool flag) = 0;
  virtual void set_index_type(std::string& _return, const IndexType::type index_type) = 0;
  virtual void set_fillvalue(std::string& _return, const std::string& chunk_name, const std::string& fill_value) = 0;
  virtual void set_para(std::string& _return, const std::string& key, const std::string& value) = 0;
};

class ArrayDBNull : virtual public ArrayDBIf {
 public:
  virtual ~ArrayDBNull() {}
  void executeQuery(std::string& /* _return */, const std::string& /* request */, const std::string& /* data */) {
    return;
  }
  void echo(std::string& /* _return */, const std::string& /* request */) {
    return;
  }
  void store(std::string& /* _return */, const Array& /* array */, const std::string& /* array_name */) {
    return;
  }
  void load_chunk(std::string& /* _return */, const std::string& /* name */, const int32_t /* id */, const std::vector<int64_t> & /* first */, const std::vector<int64_t> & /* last */) {
    return;
  }
  void create_arrinfo(const ArrayInfo& /* arrinfo */) {
    return;
  }
  void load(Array& /* _return */, const std::string& /* array_name */) {
    return;
  }
  void create_indexinfo(std::string& /* _return */, const std::string& /* array_name */, const std::string& /* index_name */, const IndexType::type /* index_type */) {
    return;
  }
  void filter(std::string& /* _return */, const std::string& /* array_name */, const std::string& /* var_name */, const std::string& /* min */, const std::string& /* max */) {
    return;
  }
  void set_time(std::string& /* _return */, const bool /* flag */) {
    return;
  }
  void set_index_type(std::string& /* _return */, const IndexType::type /* index_type */) {
    return;
  }
  void set_fillvalue(std::string& /* _return */, const std::string& /* chunk_name */, const std::string& /* fill_value */) {
    return;
  }
  void set_para(std::string& /* _return */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
};

typedef struct _ArrayDB_executeQuery_args__isset {
  _ArrayDB_executeQuery_args__isset() : request(false), data(false) {}
  bool request;
  bool data;
} _ArrayDB_executeQuery_args__isset;

class ArrayDB_executeQuery_args {
 public:

  ArrayDB_executeQuery_args() : request(""), data("") {
  }

  virtual ~ArrayDB_executeQuery_args() throw() {}

  std::string request;
  std::string data;

  _ArrayDB_executeQuery_args__isset __isset;

  void __set_request(const std::string& val) {
    request = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const ArrayDB_executeQuery_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_executeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_executeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_executeQuery_pargs {
 public:


  virtual ~ArrayDB_executeQuery_pargs() throw() {}

  const std::string* request;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_executeQuery_result__isset {
  _ArrayDB_executeQuery_result__isset() : success(false) {}
  bool success;
} _ArrayDB_executeQuery_result__isset;

class ArrayDB_executeQuery_result {
 public:

  ArrayDB_executeQuery_result() : success("") {
  }

  virtual ~ArrayDB_executeQuery_result() throw() {}

  std::string success;

  _ArrayDB_executeQuery_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_executeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_executeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_executeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_executeQuery_presult__isset {
  _ArrayDB_executeQuery_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_executeQuery_presult__isset;

class ArrayDB_executeQuery_presult {
 public:


  virtual ~ArrayDB_executeQuery_presult() throw() {}

  std::string* success;

  _ArrayDB_executeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_echo_args__isset {
  _ArrayDB_echo_args__isset() : request(false) {}
  bool request;
} _ArrayDB_echo_args__isset;

class ArrayDB_echo_args {
 public:

  ArrayDB_echo_args() : request("") {
  }

  virtual ~ArrayDB_echo_args() throw() {}

  std::string request;

  _ArrayDB_echo_args__isset __isset;

  void __set_request(const std::string& val) {
    request = val;
  }

  bool operator == (const ArrayDB_echo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_echo_pargs {
 public:


  virtual ~ArrayDB_echo_pargs() throw() {}

  const std::string* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_echo_result__isset {
  _ArrayDB_echo_result__isset() : success(false) {}
  bool success;
} _ArrayDB_echo_result__isset;

class ArrayDB_echo_result {
 public:

  ArrayDB_echo_result() : success("") {
  }

  virtual ~ArrayDB_echo_result() throw() {}

  std::string success;

  _ArrayDB_echo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_echo_presult__isset {
  _ArrayDB_echo_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_echo_presult__isset;

class ArrayDB_echo_presult {
 public:


  virtual ~ArrayDB_echo_presult() throw() {}

  std::string* success;

  _ArrayDB_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_store_args__isset {
  _ArrayDB_store_args__isset() : array(false), array_name(false) {}
  bool array;
  bool array_name;
} _ArrayDB_store_args__isset;

class ArrayDB_store_args {
 public:

  ArrayDB_store_args() : array_name("") {
  }

  virtual ~ArrayDB_store_args() throw() {}

  Array array;
  std::string array_name;

  _ArrayDB_store_args__isset __isset;

  void __set_array(const Array& val) {
    array = val;
  }

  void __set_array_name(const std::string& val) {
    array_name = val;
  }

  bool operator == (const ArrayDB_store_args & rhs) const
  {
    if (!(array == rhs.array))
      return false;
    if (!(array_name == rhs.array_name))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_store_pargs {
 public:


  virtual ~ArrayDB_store_pargs() throw() {}

  const Array* array;
  const std::string* array_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_store_result__isset {
  _ArrayDB_store_result__isset() : success(false) {}
  bool success;
} _ArrayDB_store_result__isset;

class ArrayDB_store_result {
 public:

  ArrayDB_store_result() : success("") {
  }

  virtual ~ArrayDB_store_result() throw() {}

  std::string success;

  _ArrayDB_store_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_store_presult__isset {
  _ArrayDB_store_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_store_presult__isset;

class ArrayDB_store_presult {
 public:


  virtual ~ArrayDB_store_presult() throw() {}

  std::string* success;

  _ArrayDB_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_load_chunk_args__isset {
  _ArrayDB_load_chunk_args__isset() : name(false), id(false), first(false), last(false) {}
  bool name;
  bool id;
  bool first;
  bool last;
} _ArrayDB_load_chunk_args__isset;

class ArrayDB_load_chunk_args {
 public:

  ArrayDB_load_chunk_args() : name(""), id(0) {
  }

  virtual ~ArrayDB_load_chunk_args() throw() {}

  std::string name;
  int32_t id;
  std::vector<int64_t>  first;
  std::vector<int64_t>  last;

  _ArrayDB_load_chunk_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_first(const std::vector<int64_t> & val) {
    first = val;
  }

  void __set_last(const std::vector<int64_t> & val) {
    last = val;
  }

  bool operator == (const ArrayDB_load_chunk_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(last == rhs.last))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_load_chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_load_chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_load_chunk_pargs {
 public:


  virtual ~ArrayDB_load_chunk_pargs() throw() {}

  const std::string* name;
  const int32_t* id;
  const std::vector<int64_t> * first;
  const std::vector<int64_t> * last;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_load_chunk_result__isset {
  _ArrayDB_load_chunk_result__isset() : success(false) {}
  bool success;
} _ArrayDB_load_chunk_result__isset;

class ArrayDB_load_chunk_result {
 public:

  ArrayDB_load_chunk_result() : success("") {
  }

  virtual ~ArrayDB_load_chunk_result() throw() {}

  std::string success;

  _ArrayDB_load_chunk_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_load_chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_load_chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_load_chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_load_chunk_presult__isset {
  _ArrayDB_load_chunk_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_load_chunk_presult__isset;

class ArrayDB_load_chunk_presult {
 public:


  virtual ~ArrayDB_load_chunk_presult() throw() {}

  std::string* success;

  _ArrayDB_load_chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_create_arrinfo_args__isset {
  _ArrayDB_create_arrinfo_args__isset() : arrinfo(false) {}
  bool arrinfo;
} _ArrayDB_create_arrinfo_args__isset;

class ArrayDB_create_arrinfo_args {
 public:

  ArrayDB_create_arrinfo_args() {
  }

  virtual ~ArrayDB_create_arrinfo_args() throw() {}

  ArrayInfo arrinfo;

  _ArrayDB_create_arrinfo_args__isset __isset;

  void __set_arrinfo(const ArrayInfo& val) {
    arrinfo = val;
  }

  bool operator == (const ArrayDB_create_arrinfo_args & rhs) const
  {
    if (!(arrinfo == rhs.arrinfo))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_create_arrinfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_create_arrinfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_create_arrinfo_pargs {
 public:


  virtual ~ArrayDB_create_arrinfo_pargs() throw() {}

  const ArrayInfo* arrinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_create_arrinfo_result {
 public:

  ArrayDB_create_arrinfo_result() {
  }

  virtual ~ArrayDB_create_arrinfo_result() throw() {}


  bool operator == (const ArrayDB_create_arrinfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ArrayDB_create_arrinfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_create_arrinfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_create_arrinfo_presult {
 public:


  virtual ~ArrayDB_create_arrinfo_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_load_args__isset {
  _ArrayDB_load_args__isset() : array_name(false) {}
  bool array_name;
} _ArrayDB_load_args__isset;

class ArrayDB_load_args {
 public:

  ArrayDB_load_args() : array_name("") {
  }

  virtual ~ArrayDB_load_args() throw() {}

  std::string array_name;

  _ArrayDB_load_args__isset __isset;

  void __set_array_name(const std::string& val) {
    array_name = val;
  }

  bool operator == (const ArrayDB_load_args & rhs) const
  {
    if (!(array_name == rhs.array_name))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_load_pargs {
 public:


  virtual ~ArrayDB_load_pargs() throw() {}

  const std::string* array_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_load_result__isset {
  _ArrayDB_load_result__isset() : success(false) {}
  bool success;
} _ArrayDB_load_result__isset;

class ArrayDB_load_result {
 public:

  ArrayDB_load_result() {
  }

  virtual ~ArrayDB_load_result() throw() {}

  Array success;

  _ArrayDB_load_result__isset __isset;

  void __set_success(const Array& val) {
    success = val;
  }

  bool operator == (const ArrayDB_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_load_presult__isset {
  _ArrayDB_load_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_load_presult__isset;

class ArrayDB_load_presult {
 public:


  virtual ~ArrayDB_load_presult() throw() {}

  Array* success;

  _ArrayDB_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_create_indexinfo_args__isset {
  _ArrayDB_create_indexinfo_args__isset() : array_name(false), index_name(false), index_type(false) {}
  bool array_name;
  bool index_name;
  bool index_type;
} _ArrayDB_create_indexinfo_args__isset;

class ArrayDB_create_indexinfo_args {
 public:

  ArrayDB_create_indexinfo_args() : array_name(""), index_name("") {
  }

  virtual ~ArrayDB_create_indexinfo_args() throw() {}

  std::string array_name;
  std::string index_name;
  IndexType::type index_type;

  _ArrayDB_create_indexinfo_args__isset __isset;

  void __set_array_name(const std::string& val) {
    array_name = val;
  }

  void __set_index_name(const std::string& val) {
    index_name = val;
  }

  void __set_index_type(const IndexType::type val) {
    index_type = val;
  }

  bool operator == (const ArrayDB_create_indexinfo_args & rhs) const
  {
    if (!(array_name == rhs.array_name))
      return false;
    if (!(index_name == rhs.index_name))
      return false;
    if (!(index_type == rhs.index_type))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_create_indexinfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_create_indexinfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_create_indexinfo_pargs {
 public:


  virtual ~ArrayDB_create_indexinfo_pargs() throw() {}

  const std::string* array_name;
  const std::string* index_name;
  const IndexType::type* index_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_create_indexinfo_result__isset {
  _ArrayDB_create_indexinfo_result__isset() : success(false) {}
  bool success;
} _ArrayDB_create_indexinfo_result__isset;

class ArrayDB_create_indexinfo_result {
 public:

  ArrayDB_create_indexinfo_result() : success("") {
  }

  virtual ~ArrayDB_create_indexinfo_result() throw() {}

  std::string success;

  _ArrayDB_create_indexinfo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_create_indexinfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_create_indexinfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_create_indexinfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_create_indexinfo_presult__isset {
  _ArrayDB_create_indexinfo_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_create_indexinfo_presult__isset;

class ArrayDB_create_indexinfo_presult {
 public:


  virtual ~ArrayDB_create_indexinfo_presult() throw() {}

  std::string* success;

  _ArrayDB_create_indexinfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_filter_args__isset {
  _ArrayDB_filter_args__isset() : array_name(false), var_name(false), min(false), max(false) {}
  bool array_name;
  bool var_name;
  bool min;
  bool max;
} _ArrayDB_filter_args__isset;

class ArrayDB_filter_args {
 public:

  ArrayDB_filter_args() : array_name(""), var_name(""), min(""), max("") {
  }

  virtual ~ArrayDB_filter_args() throw() {}

  std::string array_name;
  std::string var_name;
  std::string min;
  std::string max;

  _ArrayDB_filter_args__isset __isset;

  void __set_array_name(const std::string& val) {
    array_name = val;
  }

  void __set_var_name(const std::string& val) {
    var_name = val;
  }

  void __set_min(const std::string& val) {
    min = val;
  }

  void __set_max(const std::string& val) {
    max = val;
  }

  bool operator == (const ArrayDB_filter_args & rhs) const
  {
    if (!(array_name == rhs.array_name))
      return false;
    if (!(var_name == rhs.var_name))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_filter_pargs {
 public:


  virtual ~ArrayDB_filter_pargs() throw() {}

  const std::string* array_name;
  const std::string* var_name;
  const std::string* min;
  const std::string* max;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_filter_result__isset {
  _ArrayDB_filter_result__isset() : success(false) {}
  bool success;
} _ArrayDB_filter_result__isset;

class ArrayDB_filter_result {
 public:

  ArrayDB_filter_result() : success("") {
  }

  virtual ~ArrayDB_filter_result() throw() {}

  std::string success;

  _ArrayDB_filter_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_filter_presult__isset {
  _ArrayDB_filter_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_filter_presult__isset;

class ArrayDB_filter_presult {
 public:


  virtual ~ArrayDB_filter_presult() throw() {}

  std::string* success;

  _ArrayDB_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_set_time_args__isset {
  _ArrayDB_set_time_args__isset() : flag(false) {}
  bool flag;
} _ArrayDB_set_time_args__isset;

class ArrayDB_set_time_args {
 public:

  ArrayDB_set_time_args() : flag(0) {
  }

  virtual ~ArrayDB_set_time_args() throw() {}

  bool flag;

  _ArrayDB_set_time_args__isset __isset;

  void __set_flag(const bool val) {
    flag = val;
  }

  bool operator == (const ArrayDB_set_time_args & rhs) const
  {
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_set_time_pargs {
 public:


  virtual ~ArrayDB_set_time_pargs() throw() {}

  const bool* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_time_result__isset {
  _ArrayDB_set_time_result__isset() : success(false) {}
  bool success;
} _ArrayDB_set_time_result__isset;

class ArrayDB_set_time_result {
 public:

  ArrayDB_set_time_result() : success("") {
  }

  virtual ~ArrayDB_set_time_result() throw() {}

  std::string success;

  _ArrayDB_set_time_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_set_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_time_presult__isset {
  _ArrayDB_set_time_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_set_time_presult__isset;

class ArrayDB_set_time_presult {
 public:


  virtual ~ArrayDB_set_time_presult() throw() {}

  std::string* success;

  _ArrayDB_set_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_set_index_type_args__isset {
  _ArrayDB_set_index_type_args__isset() : index_type(false) {}
  bool index_type;
} _ArrayDB_set_index_type_args__isset;

class ArrayDB_set_index_type_args {
 public:

  ArrayDB_set_index_type_args() {
  }

  virtual ~ArrayDB_set_index_type_args() throw() {}

  IndexType::type index_type;

  _ArrayDB_set_index_type_args__isset __isset;

  void __set_index_type(const IndexType::type val) {
    index_type = val;
  }

  bool operator == (const ArrayDB_set_index_type_args & rhs) const
  {
    if (!(index_type == rhs.index_type))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_index_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_index_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_set_index_type_pargs {
 public:


  virtual ~ArrayDB_set_index_type_pargs() throw() {}

  const IndexType::type* index_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_index_type_result__isset {
  _ArrayDB_set_index_type_result__isset() : success(false) {}
  bool success;
} _ArrayDB_set_index_type_result__isset;

class ArrayDB_set_index_type_result {
 public:

  ArrayDB_set_index_type_result() : success("") {
  }

  virtual ~ArrayDB_set_index_type_result() throw() {}

  std::string success;

  _ArrayDB_set_index_type_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_set_index_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_index_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_index_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_index_type_presult__isset {
  _ArrayDB_set_index_type_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_set_index_type_presult__isset;

class ArrayDB_set_index_type_presult {
 public:


  virtual ~ArrayDB_set_index_type_presult() throw() {}

  std::string* success;

  _ArrayDB_set_index_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_set_fillvalue_args__isset {
  _ArrayDB_set_fillvalue_args__isset() : chunk_name(false), fill_value(false) {}
  bool chunk_name;
  bool fill_value;
} _ArrayDB_set_fillvalue_args__isset;

class ArrayDB_set_fillvalue_args {
 public:

  ArrayDB_set_fillvalue_args() : chunk_name(""), fill_value("") {
  }

  virtual ~ArrayDB_set_fillvalue_args() throw() {}

  std::string chunk_name;
  std::string fill_value;

  _ArrayDB_set_fillvalue_args__isset __isset;

  void __set_chunk_name(const std::string& val) {
    chunk_name = val;
  }

  void __set_fill_value(const std::string& val) {
    fill_value = val;
  }

  bool operator == (const ArrayDB_set_fillvalue_args & rhs) const
  {
    if (!(chunk_name == rhs.chunk_name))
      return false;
    if (!(fill_value == rhs.fill_value))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_fillvalue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_fillvalue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_set_fillvalue_pargs {
 public:


  virtual ~ArrayDB_set_fillvalue_pargs() throw() {}

  const std::string* chunk_name;
  const std::string* fill_value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_fillvalue_result__isset {
  _ArrayDB_set_fillvalue_result__isset() : success(false) {}
  bool success;
} _ArrayDB_set_fillvalue_result__isset;

class ArrayDB_set_fillvalue_result {
 public:

  ArrayDB_set_fillvalue_result() : success("") {
  }

  virtual ~ArrayDB_set_fillvalue_result() throw() {}

  std::string success;

  _ArrayDB_set_fillvalue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_set_fillvalue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_fillvalue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_fillvalue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_fillvalue_presult__isset {
  _ArrayDB_set_fillvalue_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_set_fillvalue_presult__isset;

class ArrayDB_set_fillvalue_presult {
 public:


  virtual ~ArrayDB_set_fillvalue_presult() throw() {}

  std::string* success;

  _ArrayDB_set_fillvalue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ArrayDB_set_para_args__isset {
  _ArrayDB_set_para_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _ArrayDB_set_para_args__isset;

class ArrayDB_set_para_args {
 public:

  ArrayDB_set_para_args() : key(""), value("") {
  }

  virtual ~ArrayDB_set_para_args() throw() {}

  std::string key;
  std::string value;

  _ArrayDB_set_para_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const ArrayDB_set_para_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_para_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_para_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArrayDB_set_para_pargs {
 public:


  virtual ~ArrayDB_set_para_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_para_result__isset {
  _ArrayDB_set_para_result__isset() : success(false) {}
  bool success;
} _ArrayDB_set_para_result__isset;

class ArrayDB_set_para_result {
 public:

  ArrayDB_set_para_result() : success("") {
  }

  virtual ~ArrayDB_set_para_result() throw() {}

  std::string success;

  _ArrayDB_set_para_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ArrayDB_set_para_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ArrayDB_set_para_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArrayDB_set_para_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArrayDB_set_para_presult__isset {
  _ArrayDB_set_para_presult__isset() : success(false) {}
  bool success;
} _ArrayDB_set_para_presult__isset;

class ArrayDB_set_para_presult {
 public:


  virtual ~ArrayDB_set_para_presult() throw() {}

  std::string* success;

  _ArrayDB_set_para_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ArrayDBClient : virtual public ArrayDBIf {
 public:
  ArrayDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ArrayDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void executeQuery(std::string& _return, const std::string& request, const std::string& data);
  void send_executeQuery(const std::string& request, const std::string& data);
  void recv_executeQuery(std::string& _return);
  void echo(std::string& _return, const std::string& request);
  void send_echo(const std::string& request);
  void recv_echo(std::string& _return);
  void store(std::string& _return, const Array& array, const std::string& array_name);
  void send_store(const Array& array, const std::string& array_name);
  void recv_store(std::string& _return);
  void load_chunk(std::string& _return, const std::string& name, const int32_t id, const std::vector<int64_t> & first, const std::vector<int64_t> & last);
  void send_load_chunk(const std::string& name, const int32_t id, const std::vector<int64_t> & first, const std::vector<int64_t> & last);
  void recv_load_chunk(std::string& _return);
  void create_arrinfo(const ArrayInfo& arrinfo);
  void send_create_arrinfo(const ArrayInfo& arrinfo);
  void recv_create_arrinfo();
  void load(Array& _return, const std::string& array_name);
  void send_load(const std::string& array_name);
  void recv_load(Array& _return);
  void create_indexinfo(std::string& _return, const std::string& array_name, const std::string& index_name, const IndexType::type index_type);
  void send_create_indexinfo(const std::string& array_name, const std::string& index_name, const IndexType::type index_type);
  void recv_create_indexinfo(std::string& _return);
  void filter(std::string& _return, const std::string& array_name, const std::string& var_name, const std::string& min, const std::string& max);
  void send_filter(const std::string& array_name, const std::string& var_name, const std::string& min, const std::string& max);
  void recv_filter(std::string& _return);
  void set_time(std::string& _return, const bool flag);
  void send_set_time(const bool flag);
  void recv_set_time(std::string& _return);
  void set_index_type(std::string& _return, const IndexType::type index_type);
  void send_set_index_type(const IndexType::type index_type);
  void recv_set_index_type(std::string& _return);
  void set_fillvalue(std::string& _return, const std::string& chunk_name, const std::string& fill_value);
  void send_set_fillvalue(const std::string& chunk_name, const std::string& fill_value);
  void recv_set_fillvalue(std::string& _return);
  void set_para(std::string& _return, const std::string& key, const std::string& value);
  void send_set_para(const std::string& key, const std::string& value);
  void recv_set_para(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ArrayDBProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ArrayDBIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ArrayDBProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_executeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_chunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_arrinfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_indexinfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_index_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_fillvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_para(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ArrayDBProcessor(boost::shared_ptr<ArrayDBIf> iface) :
    iface_(iface) {
    processMap_["executeQuery"] = &ArrayDBProcessor::process_executeQuery;
    processMap_["echo"] = &ArrayDBProcessor::process_echo;
    processMap_["store"] = &ArrayDBProcessor::process_store;
    processMap_["load_chunk"] = &ArrayDBProcessor::process_load_chunk;
    processMap_["create_arrinfo"] = &ArrayDBProcessor::process_create_arrinfo;
    processMap_["load"] = &ArrayDBProcessor::process_load;
    processMap_["create_indexinfo"] = &ArrayDBProcessor::process_create_indexinfo;
    processMap_["filter"] = &ArrayDBProcessor::process_filter;
    processMap_["set_time"] = &ArrayDBProcessor::process_set_time;
    processMap_["set_index_type"] = &ArrayDBProcessor::process_set_index_type;
    processMap_["set_fillvalue"] = &ArrayDBProcessor::process_set_fillvalue;
    processMap_["set_para"] = &ArrayDBProcessor::process_set_para;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ArrayDBProcessor() {}
};

class ArrayDBMultiface : virtual public ArrayDBIf {
 public:
  ArrayDBMultiface(std::vector<boost::shared_ptr<ArrayDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ArrayDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArrayDBIf> > ifaces_;
  ArrayDBMultiface() {}
  void add(boost::shared_ptr<ArrayDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void executeQuery(std::string& _return, const std::string& request, const std::string& data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->executeQuery(_return, request, data);
        return;
      } else {
        ifaces_[i]->executeQuery(_return, request, data);
      }
    }
  }

  void echo(std::string& _return, const std::string& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->echo(_return, request);
        return;
      } else {
        ifaces_[i]->echo(_return, request);
      }
    }
  }

  void store(std::string& _return, const Array& array, const std::string& array_name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->store(_return, array, array_name);
        return;
      } else {
        ifaces_[i]->store(_return, array, array_name);
      }
    }
  }

  void load_chunk(std::string& _return, const std::string& name, const int32_t id, const std::vector<int64_t> & first, const std::vector<int64_t> & last) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->load_chunk(_return, name, id, first, last);
        return;
      } else {
        ifaces_[i]->load_chunk(_return, name, id, first, last);
      }
    }
  }

  void create_arrinfo(const ArrayInfo& arrinfo) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->create_arrinfo(arrinfo);
    }
  }

  void load(Array& _return, const std::string& array_name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->load(_return, array_name);
        return;
      } else {
        ifaces_[i]->load(_return, array_name);
      }
    }
  }

  void create_indexinfo(std::string& _return, const std::string& array_name, const std::string& index_name, const IndexType::type index_type) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->create_indexinfo(_return, array_name, index_name, index_type);
        return;
      } else {
        ifaces_[i]->create_indexinfo(_return, array_name, index_name, index_type);
      }
    }
  }

  void filter(std::string& _return, const std::string& array_name, const std::string& var_name, const std::string& min, const std::string& max) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->filter(_return, array_name, var_name, min, max);
        return;
      } else {
        ifaces_[i]->filter(_return, array_name, var_name, min, max);
      }
    }
  }

  void set_time(std::string& _return, const bool flag) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->set_time(_return, flag);
        return;
      } else {
        ifaces_[i]->set_time(_return, flag);
      }
    }
  }

  void set_index_type(std::string& _return, const IndexType::type index_type) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->set_index_type(_return, index_type);
        return;
      } else {
        ifaces_[i]->set_index_type(_return, index_type);
      }
    }
  }

  void set_fillvalue(std::string& _return, const std::string& chunk_name, const std::string& fill_value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->set_fillvalue(_return, chunk_name, fill_value);
        return;
      } else {
        ifaces_[i]->set_fillvalue(_return, chunk_name, fill_value);
      }
    }
  }

  void set_para(std::string& _return, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->set_para(_return, key, value);
        return;
      } else {
        ifaces_[i]->set_para(_return, key, value);
      }
    }
  }

};

} // namespace

#endif
