#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class DataType:
  UNKNOWN = 0
  INT16 = 1
  UINT16 = 2
  INT32 = 3
  UINT32 = 4
  INT64 = 5
  UINT64 = 6
  FLOAT = 7
  DOUBLE = 8

  _VALUES_TO_NAMES = {
    0: "UNKNOWN",
    1: "INT16",
    2: "UINT16",
    3: "INT32",
    4: "UINT32",
    5: "INT64",
    6: "UINT64",
    7: "FLOAT",
    8: "DOUBLE",
  }

  _NAMES_TO_VALUES = {
    "UNKNOWN": 0,
    "INT16": 1,
    "UINT16": 2,
    "INT32": 3,
    "UINT32": 4,
    "INT64": 5,
    "UINT64": 6,
    "FLOAT": 7,
    "DOUBLE": 8,
  }

class CompressType:
  NO_COMPRESSION = 0
  ZLIB = 1
  LZMA = 2

  _VALUES_TO_NAMES = {
    0: "NO_COMPRESSION",
    1: "ZLIB",
    2: "LZMA",
  }

  _NAMES_TO_VALUES = {
    "NO_COMPRESSION": 0,
    "ZLIB": 1,
    "LZMA": 2,
  }

class StorageStrategy:
  ROUND_ROBIN = 1

  _VALUES_TO_NAMES = {
    1: "ROUND_ROBIN",
  }

  _NAMES_TO_VALUES = {
    "ROUND_ROBIN": 1,
  }

class IndexType:
  CHUNK_INDEX = 0
  BITMAP_INDEX = 1
  TILE_INDEX = 2
  CHUNK_BITMAP = 3
  CHUNK_TILE = 4
  NO_INDEX = 5

  _VALUES_TO_NAMES = {
    0: "CHUNK_INDEX",
    1: "BITMAP_INDEX",
    2: "TILE_INDEX",
    3: "CHUNK_BITMAP",
    4: "CHUNK_TILE",
    5: "NO_INDEX",
  }

  _NAMES_TO_VALUES = {
    "CHUNK_INDEX": 0,
    "BITMAP_INDEX": 1,
    "TILE_INDEX": 2,
    "CHUNK_BITMAP": 3,
    "CHUNK_TILE": 4,
    "NO_INDEX": 5,
  }


class Array:
  """
  Attributes:
   - name
   - compress_type
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'compress_type', None, None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
  )

  def __init__(self, name=None, compress_type=None, data=None,):
    self.name = name
    self.compress_type = compress_type
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.compress_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Array')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.compress_type is not None:
      oprot.writeFieldBegin('compress_type', TType.I32, 2)
      oprot.writeI32(self.compress_type)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 3)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChunkInfo:
  """
  Attributes:
   - chunk_id
   - node_id
   - ndims
   - chunk_size
   - compressed_size
   - chunk_name
   - first
   - last
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chunk_id', None, None, ), # 1
    (2, TType.I32, 'node_id', None, None, ), # 2
    (3, TType.I64, 'ndims', None, None, ), # 3
    (4, TType.I64, 'chunk_size', None, None, ), # 4
    (5, TType.I64, 'compressed_size', None, None, ), # 5
    (6, TType.STRING, 'chunk_name', None, None, ), # 6
    (7, TType.LIST, 'first', (TType.I64,None), None, ), # 7
    (8, TType.LIST, 'last', (TType.I64,None), None, ), # 8
  )

  def __init__(self, chunk_id=None, node_id=None, ndims=None, chunk_size=None, compressed_size=None, chunk_name=None, first=None, last=None,):
    self.chunk_id = chunk_id
    self.node_id = node_id
    self.ndims = ndims
    self.chunk_size = chunk_size
    self.compressed_size = compressed_size
    self.chunk_name = chunk_name
    self.first = first
    self.last = last

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chunk_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.node_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.ndims = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.chunk_size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.compressed_size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.chunk_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.first = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.first.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.last = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.last.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChunkInfo')
    if self.chunk_id is not None:
      oprot.writeFieldBegin('chunk_id', TType.I32, 1)
      oprot.writeI32(self.chunk_id)
      oprot.writeFieldEnd()
    if self.node_id is not None:
      oprot.writeFieldBegin('node_id', TType.I32, 2)
      oprot.writeI32(self.node_id)
      oprot.writeFieldEnd()
    if self.ndims is not None:
      oprot.writeFieldBegin('ndims', TType.I64, 3)
      oprot.writeI64(self.ndims)
      oprot.writeFieldEnd()
    if self.chunk_size is not None:
      oprot.writeFieldBegin('chunk_size', TType.I64, 4)
      oprot.writeI64(self.chunk_size)
      oprot.writeFieldEnd()
    if self.compressed_size is not None:
      oprot.writeFieldBegin('compressed_size', TType.I64, 5)
      oprot.writeI64(self.compressed_size)
      oprot.writeFieldEnd()
    if self.chunk_name is not None:
      oprot.writeFieldBegin('chunk_name', TType.STRING, 6)
      oprot.writeString(self.chunk_name)
      oprot.writeFieldEnd()
    if self.first is not None:
      oprot.writeFieldBegin('first', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.first))
      for iter12 in self.first:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.last is not None:
      oprot.writeFieldBegin('last', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.last))
      for iter13 in self.last:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DimInfo:
  """
  Attributes:
   - name
   - length
   - chunk_length
   - overlap_length
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I64, 'length', None, None, ), # 2
    (3, TType.I64, 'chunk_length', None, None, ), # 3
    (4, TType.I64, 'overlap_length', None, None, ), # 4
  )

  def __init__(self, name=None, length=None, chunk_length=None, overlap_length=None,):
    self.name = name
    self.length = length
    self.chunk_length = chunk_length
    self.overlap_length = overlap_length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.length = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.chunk_length = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.overlap_length = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DimInfo')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I64, 2)
      oprot.writeI64(self.length)
      oprot.writeFieldEnd()
    if self.chunk_length is not None:
      oprot.writeFieldBegin('chunk_length', TType.I64, 3)
      oprot.writeI64(self.chunk_length)
      oprot.writeFieldEnd()
    if self.overlap_length is not None:
      oprot.writeFieldBegin('overlap_length', TType.I64, 4)
      oprot.writeI64(self.overlap_length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArrayInfo:
  """
  Attributes:
   - array_id
   - name
   - var_name
   - var_type
   - dtype_size
   - nelmts
   - ndims
   - ss
   - nchunks
   - dims
   - chunk_dims
   - chunks
   - fill_value
   - compress_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'array_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'var_name', None, None, ), # 3
    (4, TType.I32, 'var_type', None, None, ), # 4
    (5, TType.I64, 'dtype_size', None, None, ), # 5
    (6, TType.I64, 'nelmts', None, None, ), # 6
    (7, TType.I64, 'ndims', None, None, ), # 7
    (8, TType.I32, 'ss', None, None, ), # 8
    (9, TType.I64, 'nchunks', None, None, ), # 9
    (10, TType.LIST, 'dims', (TType.STRUCT,(DimInfo, DimInfo.thrift_spec)), None, ), # 10
    (11, TType.LIST, 'chunk_dims', (TType.I64,None), None, ), # 11
    (12, TType.LIST, 'chunks', (TType.STRUCT,(ChunkInfo, ChunkInfo.thrift_spec)), None, ), # 12
    (13, TType.STRING, 'fill_value', None, None, ), # 13
    (14, TType.I32, 'compress_type', None, None, ), # 14
  )

  def __init__(self, array_id=None, name=None, var_name=None, var_type=None, dtype_size=None, nelmts=None, ndims=None, ss=None, nchunks=None, dims=None, chunk_dims=None, chunks=None, fill_value=None, compress_type=None,):
    self.array_id = array_id
    self.name = name
    self.var_name = var_name
    self.var_type = var_type
    self.dtype_size = dtype_size
    self.nelmts = nelmts
    self.ndims = ndims
    self.ss = ss
    self.nchunks = nchunks
    self.dims = dims
    self.chunk_dims = chunk_dims
    self.chunks = chunks
    self.fill_value = fill_value
    self.compress_type = compress_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.array_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.var_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.var_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.dtype_size = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.nelmts = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.ndims = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.ss = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.nchunks = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.dims = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = DimInfo()
            _elem19.read(iprot)
            self.dims.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.chunk_dims = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI64();
            self.chunk_dims.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.chunks = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = ChunkInfo()
            _elem31.read(iprot)
            self.chunks.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.fill_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.compress_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArrayInfo')
    if self.array_id is not None:
      oprot.writeFieldBegin('array_id', TType.I64, 1)
      oprot.writeI64(self.array_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.var_name is not None:
      oprot.writeFieldBegin('var_name', TType.STRING, 3)
      oprot.writeString(self.var_name)
      oprot.writeFieldEnd()
    if self.var_type is not None:
      oprot.writeFieldBegin('var_type', TType.I32, 4)
      oprot.writeI32(self.var_type)
      oprot.writeFieldEnd()
    if self.dtype_size is not None:
      oprot.writeFieldBegin('dtype_size', TType.I64, 5)
      oprot.writeI64(self.dtype_size)
      oprot.writeFieldEnd()
    if self.nelmts is not None:
      oprot.writeFieldBegin('nelmts', TType.I64, 6)
      oprot.writeI64(self.nelmts)
      oprot.writeFieldEnd()
    if self.ndims is not None:
      oprot.writeFieldBegin('ndims', TType.I64, 7)
      oprot.writeI64(self.ndims)
      oprot.writeFieldEnd()
    if self.ss is not None:
      oprot.writeFieldBegin('ss', TType.I32, 8)
      oprot.writeI32(self.ss)
      oprot.writeFieldEnd()
    if self.nchunks is not None:
      oprot.writeFieldBegin('nchunks', TType.I64, 9)
      oprot.writeI64(self.nchunks)
      oprot.writeFieldEnd()
    if self.dims is not None:
      oprot.writeFieldBegin('dims', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.dims))
      for iter32 in self.dims:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chunk_dims is not None:
      oprot.writeFieldBegin('chunk_dims', TType.LIST, 11)
      oprot.writeListBegin(TType.I64, len(self.chunk_dims))
      for iter33 in self.chunk_dims:
        oprot.writeI64(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chunks is not None:
      oprot.writeFieldBegin('chunks', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.chunks))
      for iter34 in self.chunks:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fill_value is not None:
      oprot.writeFieldBegin('fill_value', TType.STRING, 13)
      oprot.writeString(self.fill_value)
      oprot.writeFieldEnd()
    if self.compress_type is not None:
      oprot.writeFieldBegin('compress_type', TType.I32, 14)
      oprot.writeI32(self.compress_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChunkIndex:
  """
  Attributes:
   - chunk_id
   - max
   - min
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chunk_id', None, None, ), # 1
    (2, TType.DOUBLE, 'max', None, None, ), # 2
    (3, TType.DOUBLE, 'min', None, None, ), # 3
  )

  def __init__(self, chunk_id=None, max=None, min=None,):
    self.chunk_id = chunk_id
    self.max = max
    self.min = min

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chunk_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.max = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.min = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChunkIndex')
    if self.chunk_id is not None:
      oprot.writeFieldBegin('chunk_id', TType.I32, 1)
      oprot.writeI32(self.chunk_id)
      oprot.writeFieldEnd()
    if self.max is not None:
      oprot.writeFieldBegin('max', TType.DOUBLE, 2)
      oprot.writeDouble(self.max)
      oprot.writeFieldEnd()
    if self.min is not None:
      oprot.writeFieldBegin('min', TType.DOUBLE, 3)
      oprot.writeDouble(self.min)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexInfo:
  """
  Attributes:
   - array_name
   - index_name
   - index_type
   - chunk_indexs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'array_name', None, None, ), # 1
    (2, TType.STRING, 'index_name', None, None, ), # 2
    (3, TType.I32, 'index_type', None, None, ), # 3
    (4, TType.LIST, 'chunk_indexs', (TType.STRUCT,(ChunkIndex, ChunkIndex.thrift_spec)), None, ), # 4
  )

  def __init__(self, array_name=None, index_name=None, index_type=None, chunk_indexs=None,):
    self.array_name = array_name
    self.index_name = index_name
    self.index_type = index_type
    self.chunk_indexs = chunk_indexs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.array_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.index_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.index_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.chunk_indexs = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = ChunkIndex()
            _elem40.read(iprot)
            self.chunk_indexs.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexInfo')
    if self.array_name is not None:
      oprot.writeFieldBegin('array_name', TType.STRING, 1)
      oprot.writeString(self.array_name)
      oprot.writeFieldEnd()
    if self.index_name is not None:
      oprot.writeFieldBegin('index_name', TType.STRING, 2)
      oprot.writeString(self.index_name)
      oprot.writeFieldEnd()
    if self.index_type is not None:
      oprot.writeFieldBegin('index_type', TType.I32, 3)
      oprot.writeI32(self.index_type)
      oprot.writeFieldEnd()
    if self.chunk_indexs is not None:
      oprot.writeFieldBegin('chunk_indexs', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.chunk_indexs))
      for iter41 in self.chunk_indexs:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
